if [[ "$1" = "-h" ]]; then
  local usage
  usage=$(<<'EOS'
random - generate random number

   random
   random SEED
   random START END
   random START STEP END
   random choice [ITEMS...]

DESCRIPTION
RANDOM  generates a pseudo-random integer from a uniform distribution.
The range (inclusive) is dependent on the arguments passed.
No arguments indicate a range of [0; 32767].
If one argument is specified, the internal engine will be seeded with the
argument for future invocations of RANDOM and no output will be produced.
Two arguments indicate a range of [START; END].
Three arguments indicate a range of [START; END] with a spacing of STEP between possible outputs.
RANDOM choice will select one random item from the succeeding arguments.

Note that seeding the engine will NOT give the same result across different systems.

You should not consider RANDOM cryptographically secure, or even statistically accurate.

EXAMPLE
The following code will count down from a random even number between 10 and 20 to 1:

   for i in (seq (random 10 2 20) -1 1)
       echo $i
   end

And this will open a random picture from any of the subdirectories:

   open (random choice **jpg)
EOS
)
  echo $usage
  return
fi

if [[ $# -eq 0 ]]; then
  echo $RANDOM
elif [[ $# -eq 1 ]]; then
  if ! [[ "$1" -eq "$1" ]]; then
    echo >&2 "random: argument '$1' is not a valid integer" && return 2
  fi
  if [[ $1 -gt 32767 ]]; then
    echo >&2 "random: argument '$1' out of range" && return 2
  fi
  RANDOM=$1
elif [[ $# -gt 3 ]]; then
  echo >&2 "random: too many arguments" && return 2
else
  local minval stepval maxval
  minval="$1"
  [[ $# -eq 3 ]] && stepval=$2 || stepval=1
  maxval=${@[-1]}
  echo $minval $stepval $maxval

  local val; for val in $minval $stepval $maxval; do
    if ! [[ $val = $val ]]; then
      echo >&2 "random: argument '$1' is not a valid integer" && return 2
    fi
  done

  local modval=$(( ( $maxval + 1 - $minval ) / $stepval ))
  if [[ $modval -eq 0 ]]; then
    echo >&2 "random: range contains only one possible value" && return 2
  fi

  echo $(( ( $RANDOM % $modval * $stepval ) + $minval ))
fi
