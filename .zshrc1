#!/bin/zsh
# .zshrc1
# > First things first - start your .zshrc off right
# Project Home: https://github.com/mattmc3/zshrc1

#region Setup zshrc1
#
typeset -g ZSHRC1="${(%):-%N}}"
typeset -g ZSHRC1_VERSION="2.0.0"

# Define core environment vars.
export __zsh_config_dir=${ZDOTDIR:-${XDG_CONFIG_HOME:-$HOME/.config}/zsh}
export __zsh_user_data_dir=${XDG_DATA_HOME:-$HOME/.local/share}/zsh
export __zsh_cache_dir=${XDG_CACHE_HOME:-$HOME/.cache}/zsh
mkdir -p $__zsh_config_dir $__zsh_user_data_dir $__zsh_cache_dir

# Users can customize with zstyles if they want.
[[ ! -r $__zsh_config_dir/.zstyles ]] || source $__zsh_config_dir/.zstyles

# There's not really a post_zshrc event, so we're going to fake one by adding a
# function called run_post_zshrc to the precmd event. That function only runs once,
# and then unregisters itself. If the user wants to (or needs to because it doesn't
# play well with a plugin), they can run it themselves manually at the end of their
# .zshrc, and then it unregisters.

# Define a variable to hold actions run during the post_zshrc event.
typeset -ga post_zshrc_hook

# Add our new event.
function run_post_zshrc {
  # Run anything attached to the post_zshrc hook
  local fn
  for fn in $post_zshrc_hook; do
    #echo post_zshrc running "${=fn}"
    "${=fn}"
  done

  # Now delete the precmd hook and self-remove this function and its list var so
  # that it only runs once, and doesn't keep running on every future precmd event.
  add-zsh-hook -d precmd run_post_zshrc
  unfunction -- run_post_zshrc
  unset -- post_zshrc_hook
}

# Attach run_post_zshrc to built-in precmd.
autoload -U add-zsh-hook
add-zsh-hook precmd run_post_zshrc

#
#endregion
#region Helper functions
#

# Make a directory from a variable name.
function mkdirvar {
  emulate -L zsh
  local zdirvar
  for zdirvar in $@; do
    [[ -d "${(P)zdirvar}" ]] || mkdir -p "$(P){zdirvar}"
  done
}

# Cache the results of an eval command
function cached-eval {
  emulate -L zsh; setopt local_options extended_glob
  (( $# >= 2 )) || return 1

  : ${__zsh_cache_dir:=${XDG_CACHE_HOME:-$HOME/.cache}/zsh}
  local cmdname=$1; shift
  local cachefile=$__zsh_cache_dir/cached/${cmdname}.zsh
  local -a cached=($cachefile(Nmh-20))
  # If the file has no size (is empty), or is older than 20 hours re-gen the cache.
  if [[ ! -s $cachefile ]] || (( ! ${#cached} )); then
    mkdir -p ${cachefile:h}
    "$@" >| $cachefile
  fi
  source $cachefile
}

# Check if a file can be autoloaded by trying to load it in a subshell.
function is-autoloadable {
  ( unfunction "$1"; autoload -U +X "$1" ) &> /dev/null
}

# Checks if a name is a command, function, or alias.
function is-callable {
  (( $+commands[$1] || $+functions[$1] || $+aliases[$1] || $+builtins[$1] ))
}

# Check whether a string represents "true" (1, y, yes, t, true, o, on).
function is-true {
  [[ -n "$1" && "$1:l" == (1|y(es|)|t(rue|)|o(n|)) ]]
}

# OS checks.
function is-macos  { [[ "$OSTYPE" == darwin* ]] }
function is-linux  { [[ "$OSTYPE" == linux*  ]] }
function is-bsd    { [[ "$OSTYPE" == *bsd*   ]] }
function is-cygwin { [[ "$OSTYPE" == cygwin* ]] }
function is-termux { [[ "$OSTYPE" == linux-android ]] }

# Check term family.
function is-term-family {
  [[ $TERM = $1 || $TERM = $1-* ]]
}

# Check if tmux.
function is-tmux {
  is-term-family tmux || [[ -n "$TMUX" ]]
}

#
#endregion
#region Environment and envvars
#

if zstyle -T ':zshrc1:environment' use-xdg-basedirs; then
  export XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
  export XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
  export XDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}
  export XDG_STATE_HOME=${XDG_STATE_HOME:-$HOME/.local/state}
  mkdirvar XDG_{CONFIG,CACHE,DATA,STATE}_HOME
fi

# Set Zsh options related to globbing.
setopt extended_glob         # Use more awesome globbing features.
setopt glob_dots             # Include dotfiles when globbing.
setopt NO_rm_star_silent     # Ask for confirmation for `rm *' or `rm path/*'

# Set general Zsh options.
setopt combining_chars       # Combine 0-len chars with the base character (eg: accents).
setopt interactive_comments  # Enable comments in interactive shell.
setopt rc_quotes             # Allow 'Hitchhikers''s Guide' instead of 'Hitchhikers'\''s Guide'.
setopt NO_mail_warning       # Don't print a warning message if a mail file has been accessed.
setopt NO_beep               # Don't beep on error in line editor.

# Set Zsh options related to job control.
setopt auto_resume           # Attempt to resume existing job before creating a new process.
setopt long_list_jobs        # List jobs in the long format by default.
setopt notify                # Report status of background jobs immediately.
setopt NO_bg_nice            # Don't run all background jobs at a lower priority.
setopt NO_check_jobs         # Don't report on jobs when shell exit.
setopt NO_hup                # Don't kill jobs on shell exit.

# Set common variables if they have not already been set.
export EDITOR=${EDITOR:-vim}
export VISUAL=${VISUAL:-vim}
export PAGER=${PAGER:-less}
[[ "$OSTYPE" == darwin* ]] && export BROWSER=${BROWSER:-open}
export LANG=${LANG:-en_US.UTF-8}

# Set the Less input preprocessor.
# Try both `lesspipe` and `lesspipe.sh` as either might exist on a system.
if [[ -z "$LESSOPEN" ]] && (( $#commands[(i)lesspipe(|.sh)] )); then
  export LESSOPEN="| /usr/bin/env $commands[(i)lesspipe(|.sh)] %s 2>&-"
fi
export LESS="${LESS:--g -i -M -R -S -w -z-4}"

# Ensure path arrays do not contain duplicates.
typeset -gU cdpath fpath mailpath path

# Add /usr/local to path.
path=(/usr/local/{,s}bin(N) $path)

() {
  # Setup homebrew if it exists on the system.
  local brew_owner; local -aU brew_cmds
  brew_cmds=(
    $commands[brew]
    $HOME/.homebrew/bin/brew(N)
    $HOME/.linuxbrew/bin/brew(N)
    /opt/homebrew/bin/brew(N)
    /usr/local/bin/brew(N)
    /home/linuxbrew/.linuxbrew/bin/brew(N)
  )
  if [[ "${#brew_cmds}" -gt 0 ]]; then
    if [[ -z "$HOMEBREW_PREFIX" ]]; then
      source <("${brew_cmds[1]}" shellenv)
    fi
    brew_owner="$(stat -f "%Su" "$HOMEBREW_PREFIX")"
    if [[ "$(whoami)" != "$brew_owner" ]]; then
      alias brew="sudo -Hu '$brew_owner' brew"
    fi
  fi
}

# Set the list of directories that Zsh searches for programs.
typeset -gaU prepath
if [[ "${#prepath}" -eq 0 ]]; then
  zstyle -s ':zshrc1:environment' 'prepath' 'prepath' \
  || prepath=(
      $HOME/{,s}bin(N)
      $HOME/.local/{,s}bin(N)
    )
fi

# If path gets prepended and is now out of order, do `path=($prepath $path)`.
path=($prepath $path)

#
#endregion
#region History
#

# Set Zsh options related to history.
setopt bang_hist               # Treat the '!' character specially during expansion.
setopt extended_history        # Write the history file in the ':start:elapsed;command' format.
setopt hist_expire_dups_first  # Expire a duplicate event first when trimming history.
setopt hist_find_no_dups       # Do not display a previously found event.
setopt hist_ignore_all_dups    # Delete an old recorded event if a new event is a duplicate.
setopt hist_ignore_dups        # Do not record an event that was just recorded again.
setopt hist_ignore_space       # Do not record an event starting with a space.
setopt hist_reduce_blanks      # Remove extra blanks from commands added to the history list.
setopt hist_save_no_dups       # Do not write a duplicate event to the history file.
setopt hist_verify             # Do not execute immediately upon history expansion.
setopt inc_append_history      # Write to the history file immediately, not when the shell exits.
setopt NO_hist_beep            # Don't beep when accessing non-existent history.
setopt NO_share_history        # Don't share history between all sessions.

# Set the path to the default history file.
: ${__zsh_user_data_dir:=${XDG_DATA_HOME:-$HOME/.local/share}/zsh}
if ! zstyle -s ':zshrc1:history' histfile 'HISTFILE'; then
  if zstyle -T ':zshrc1:history' use-xdg-basedirs; then
    HISTFILE="${__zsh_user_data_dir}/zsh_history"
  else
    HISTFILE="${ZDOTDIR:-$HOME}/.zsh_history"
  fi
fi

# Make sure the user didn't store an empty history file, or a literal '~',
# and that the history path exists. Basically, protect the user from themselves.
HISTFILE="${~HISTFILE}"
[[ -d "${HISTFILE:h}" ]] || mkdir -p "${HISTFILE:h}"

# History file size (default 1000).
zstyle -s ':zshrc1:history' savehist 'SAVEHIST' || SAVEHIST=100000

# Session history size, default: 2000).
zstyle -s ':zshrc1:history' histsize 'HISTSIZE' || HISTSIZE=20000

# Set history aliases.
if ! zstyle -t ':zshrc1:history:alias' skip; then
  alias hist='fc -li'
  alias history-stat="history 0 | awk '{print \$2}' | sort | uniq -c | sort -n -r | head"
fi

#
#endregion
#region Directory
#

# Set Zsh options related to directories, globbing, and I/O.
setopt auto_pushd         # Make cd push the old directory onto the dirstack.
setopt pushd_minus        # Exchanges meanings of +/- when navigating the dirstack.
setopt pushd_silent       # Do not print the directory stack after pushd or popd.
setopt pushd_to_home      # Push to home directory when no argument is given.
setopt multios            # Write to multiple descriptors.
setopt extended_glob      # Use extended globbing syntax.
setopt glob_dots          # Don't hide dotfiles from glob patterns.
setopt NO_clobber         # Don't overwrite files with >. Use >| to bypass.
setopt NO_rm_star_silent  # Ask for confirmation for `rm *' or `rm path/*'

# Set directory aliases.
if ! zstyle -t ':zshrc1:directory:alias' skip; then
  alias -- -='cd -'
  alias dirh='dirs -v'

  _dotdot=('..')
  for _index in {1..9}; do
    alias "$_index"="cd -${_index}"         # dirstack aliases (eg: "3"="cd -3")
    alias -g "..$_index"=${(pj:/:)_dotdot}  # backref aliases (eg: "..3"="../../..")
    _dotdot+=('..')
  done
  unset _dotdot _index
fi

#
#endregion
#region Colors
#

() {
  # Built-in zsh colors.
  autoload -Uz colors && colors

  # Colorize man pages.
  export LESS_TERMCAP_md=${LESS_TERMCAP_md:-$fg_bold[blue]}   # start bold
  export LESS_TERMCAP_mb=${LESS_TERMCAP_mb:-$fg_bold[blue]}   # start blink
  export LESS_TERMCAP_so=${LESS_TERMCAP_so:-$'\e[00;47;30m'}  # start standout: white bg, black fg
  export LESS_TERMCAP_us=${LESS_TERMCAP_us:-$'\e[04;35m'}     # start underline: underline magenta
  export LESS_TERMCAP_se=${LESS_TERMCAP_se:-$reset_color}     # end standout
  export LESS_TERMCAP_ue=${LESS_TERMCAP_ue:-$reset_color}     # end underline
  export LESS_TERMCAP_me=${LESS_TERMCAP_me:-$reset_color}     # end bold/blink

  # Set LS_COLORS using (g)dircolors if found.
  local dircolors_cmds=(
    $commands[dircolors](N) $commands[gdircolors](N)
  )
  if [[ -z "$LS_COLORS" ]] && (( $#dircolors_cmds )); then
    source <($dircolors_cmds[1] -b)
  fi
  # Pick a reasonable default for LS_COLORS if it hasn't been set by this point.
  export LS_COLORS="${LS_COLORS:-di=34:ln=35:so=32:pi=33:ex=31:bd=1;36:cd=1;33:su=30;41:sg=30;46:tw=30;42:ow=30;43}"

  # Missing dircolors is a good indicator of a BSD system.
  if (( ! $+commands[dircolors] )) || [[ "$OSTYPE" == darwin* ]]; then
    # For BSD systems, set LSCOLORS
    export CLICOLOR=1
    export LSCOLORS="${LSCOLORS:-exfxcxdxbxGxDxabagacad}"
  fi

  # Set aliases.
  if ! zstyle -t ':zshrc1:colors:alias' skip; then
    # Set colors for grep.
    alias grep="${aliases[grep]:-grep} --color=auto"

    # Set colors for ls.
    alias ls="${aliases[ls]:-ls} --color=auto"
    if (( $+commands[gls] )); then
      alias gls="${aliases[gls]:-gls} --color=auto"
    fi

    # Set colors for diff
    if command diff --color /dev/null{,} &>/dev/null; then
      alias diff="${aliases[diff]:-diff} --color"
    fi

    # Print a simple colormap.
    alias colormap='for i in {0..255}; do print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+"\n"}; done'
  fi

  # Colorize completions
  zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
}

#
#endregion
#region Editor
#

# Update cursor style.
function update-cursor-style {
  # We currently only support the xterm family of terminals
  if ! is-term-family xterm && ! is-term-family rxvt && ! is-tmux; then
    return
  fi

  if bindkey -lL main | grep viins > /dev/null; then
    # For vi-mode we
    case $KEYMAP in
      vicmd)      printf '\e[2 q';;
      viins|main) printf '\e[6 q';;
    esac
  else
    # If we're in emacs mode, we always want the block cursor
    printf '\e[2 q'
  fi
}

# Enable terminal application mode.
function zle-line-init {
  # The terminal must be in application mode when ZLE is active for $terminfo
  # values to be valid.
  if (( $+terminfo[smkx] )); then
    # Enable terminal application mode.
    echoti smkx
  fi

  # Ensure we have the correct cursor.
  zle update-cursor-style
}

# Disable terminal application mode.
function zle-line-finish {
  # The terminal must be in application mode when ZLE is active for $terminfo
  # values to be valid.
  if (( $+terminfo[rmkx] )); then
    # Disable terminal application mode.
    echoti rmkx
  fi
}

# Reset the prompt when the keymap changes.
function zle-keymap-select {
  zle update-cursor-style

  zle reset-prompt
  zle -R
}

# Init terminal line editor.
() {
  # Set Zsh editor options.
  setopt NO_beep                 # Beep on error in line editor.
  setopt NO_flow_control         # Allow the usage of ^Q/^S in the context of zsh.

  # Treat these characters as part of a word.
  zstyle -s ':zshrc1:editor' wordchars 'WORDCHARS' || WORDCHARS='*?_-.[]~&;!#$%^(){}<>'

  # Use human-friendly identifiers.
  zmodload zsh/terminfo
  typeset -gA key_info

  # Modifiers
  key_info=(
    'Control'  '\C-'
    'Escape'   '\e'
    'Meta'     '\M-'
  )

  # Basic keys
  key_info+=(
    'Backspace'  "^?"
    'Delete'     "^[[3~"
    'F1'         "$terminfo[kf1]"
    'F2'         "$terminfo[kf2]"
    'F3'         "$terminfo[kf3]"
    'F4'         "$terminfo[kf4]"
    'F5'         "$terminfo[kf5]"
    'F6'         "$terminfo[kf6]"
    'F7'         "$terminfo[kf7]"
    'F8'         "$terminfo[kf8]"
    'F9'         "$terminfo[kf9]"
    'F10'        "$terminfo[kf10]"
    'F11'        "$terminfo[kf11]"
    'F12'        "$terminfo[kf12]"
    'Insert'     "$terminfo[kich1]"
    'Home'       "$terminfo[khome]"
    'PageUp'     "$terminfo[kpp]"
    'End'        "$terminfo[kend]"
    'PageDown'   "$terminfo[knp]"
    'Up'         "$terminfo[kcuu1]"
    'Left'       "$terminfo[kcub1]"
    'Down'       "$terminfo[kcud1]"
    'Right'      "$terminfo[kcuf1]"
    'BackTab'    "$terminfo[kcbt]"
  )

  # Modifier plus another key
  key_info+=(
    'AltLeft'          "${key_info[Escape]}${key_info[Left]} \e[1;3D"
    'AltRight'         "${key_info[Escape]}${key_info[Right]} \e[1;3C"
    'ControlLeft'      '\e[1;5D \e[5D \e\e[D \eOd'
    'ControlRight'     '\e[1;5C \e[5C \e\e[C \eOc'
    'ControlPageUp'    '\e[5;5~'
    'ControlPageDown'  '\e[6;5~'
  )

  # Assign zle functions
  zle -N update-cursor-style
  zle -N zle-line-init
  zle -N zle-line-finish
  zle -N zle-keymap-select

  # Reset to default key bindings
  bindkey -d

  # Global keybinds
  local -A global_keybinds
  global_keybinds=(
    "$key_info[Home]"   beginning-of-line
    "$key_info[End]"    end-of-line
    "$key_info[Delete]" delete-char
  )

  # emacs and vi insert mode keybinds
  local -A viins_keybinds
  viins_keybinds=(
    "$key_info[Backspace]" backward-delete-char
    "$key_info[Control]W"  backward-kill-word
  )

  # vi command mode keybinds
  local -A vicmd_keybinds
  vicmd_keybinds=(
    "$key_info[Delete]" delete-char
  )

  # Special case for ControlLeft and ControlRight because they have multiple
  # possible binds.
  for key in "${(s: :)key_info[ControlLeft]}" "${(s: :)key_info[AltLeft]}"; do
    bindkey -M emacs "$key" emacs-backward-word
    bindkey -M viins "$key" vi-backward-word
    bindkey -M vicmd "$key" vi-backward-word
  done
  for key in "${(s: :)key_info[ControlRight]}" "${(s: :)key_info[AltRight]}"; do
    bindkey -M emacs "$key" emacs-forward-word
    bindkey -M viins "$key" vi-forward-word
    bindkey -M vicmd "$key" vi-forward-word
  done

  # Bind all global and viins keys to the emacs keymap
  for key bind in ${(kv)global_keybinds} ${(kv)viins_keybinds}; do
    bindkey -M emacs "$key" "$bind"
    bindkey -M viins "$key" "$bind"
  done

  # Bind all global, vi, and vicmd keys to the vicmd keymap
  for key bind in ${(kv)global_keybinds} ${(kv)vicmd_keybinds}; do
    bindkey -M vicmd "$key" "$bind"
  done

  # Set the key layout.
  zstyle -s ':zshrc1:editor' key-bindings 'key_bindings'
  if [[ "$key_bindings" == (emacs|) ]]; then
    bindkey -e
  elif [[ "$key_bindings" == vi ]]; then
    bindkey -v
  else
    print "zshrc1: editor: invalid key bindings: $key_bindings" >&2
  fi
}

#
#endregion
#region Utility
#

# Use built-in paste magic.
autoload -Uz bracketed-paste-url-magic
zle -N bracketed-paste bracketed-paste-url-magic
autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic

# Load more specific 'run-help' function from $fpath.
(( $+aliases[run-help] )) && unalias run-help && autoload -Uz run-help
alias help=run-help

# Make ls more useful on non-BSD systems.
if (( ! $+commands[dircolors] )) && [[ "$OSTYPE" != darwin* ]]; then
  alias ls="${aliases[ls]:-ls} --group-directories-first"
fi

# Ensure python commands exist.
if (( $+commands[python3] )) && ! (( $+commands[python] )); then
  alias python=python3
fi
if (( $+commands[pip3] )) && ! (( $+commands[pip] )); then
  alias pip=pip3
fi

# Ensure envsubst command exists.
if ! (( $+commands[envsubst] )); then
  alias envsubst="python -c 'import os,sys;[sys.stdout.write(os.path.expandvars(l)) for l in sys.stdin]'"
fi

# Ensure hd (hex dump) command exists.
if ! (( $+commands[hd] )) && (( $+commands[hexdump] )); then
  alias hd="hexdump -C"
fi

# Ensure open command exists.
if ! (( $+commands[open] )); then
  if [[ "$OSTYPE" == cygwin* ]]; then
    alias open='cygstart'
  elif [[ "$OSTYPE" == linux-android ]]; then
    alias open='termux-open'
  elif (( $+commands[xdg-open] )); then
    alias open='xdg-open'
  fi
fi

# Ensure pbcopy/pbpaste commands exist.
if ! (( $+commands[pbcopy] )); then
  if [[ "$OSTYPE" == cygwin* ]]; then
    alias pbcopy='tee > /dev/clipboard'
    alias pbpaste='cat /dev/clipboard'
  elif [[ "$OSTYPE" == linux-android ]]; then
    alias pbcopy='termux-clipboard-set'
    alias pbpaste='termux-clipboard-get'
  elif (( $+commands[wl-copy] && $+commands[wl-paste] )); then
    alias pbcopy='wl-copy'
    alias pbpaste='wl-paste'
  elif [[ -n $DISPLAY ]]; then
    if (( $+commands[xclip] )); then
      alias pbcopy='xclip -selection clipboard -in'
      alias pbpaste='xclip -selection clipboard -out'
    elif (( $+commands[xsel] )); then
      alias pbcopy='xsel --clipboard --input'
      alias pbpaste='xsel --clipboard --output'
    fi
  fi
fi

#
#endregion
#region zfunctions
#

# Init Fish-like functions directory.
() {
  # Which autoload functions directory to use? Use glob_subst to support '~'.
  if [[ -z "$ZFUNCDIR" ]]; then
    local ZFUNCDIR
    zstyle -s ':zshrc1:zfunctions' directory 'ZFUNCDIR' || ZFUNCDIR=$__zsh_config_dir/functions
    ZFUNCDIR=${~ZFUNCDIR}
  fi

  # Autoload a user functions directory.
  local fndir
  for fndir in $ZFUNCDIR(-/FN) $ZFUNCDIR/*(-/FN); do
    fpath=($fndir $fpath)
    autoload -Uz $fndir/*~*/_*(N.:t)
  done
}

#
#endregion
#region Prompt
#

# Prompt options
setopt prompt_subst       # Expand parameters in prompt variables.
setopt transient_rprompt  # Remove right prompt artifacts from prior commands.

# Set 2 space indent for each new level in a multi-line script. This can then be
# overridden by a prompt or plugin, but is a better default than Zsh's.
PS2='${${${(%):-%_}//[^ ]}// /  }    '

# Wrap powerlevel10k prompt to support themes directory
function prompt_p10k_setup {
  if [[ -n "$1" ]]; then
    local -a configs=($__zsh_config_dir/themes/$1.p10k.zsh(N))
    (( $#configs )) && source $configs[1]
  fi
  prompt_powerlevel10k_setup
}

# Make starship work with built-in prompt system.
function prompt_starship_setup {
  # When loaded through the prompt command, these prompt_* options will be enabled
  prompt_opts=(cr percent sp subst)

  # Set the starship config based on the argument if provided.
  if [[ -n "$1" ]]; then
    local -a configs=(
      "$__zsh_config_dir/themes/${1}.toml"(N)
      "${XDG_CONFIG_HOME:-$HOME/.config}/starship/${1}.toml"(N)
    )
    (( $#configs )) && export STARSHIP_CONFIG=$configs[1]
  fi

  # Initialize starship.
  if zstyle -t ':zephyr:plugin:prompt' 'use-cache'; then
    cached-eval 'starship-init-zsh' starship init zsh
  else
    source <(starship init zsh)
  fi
}

# Wrap promptinit.
function promptinit {
  # Initialize real built-in prompt system.
  unfunction promptinit
  autoload -Uz promptinit && promptinit

  # Hook P10k into Zsh's prompt system.
  (( $+functions[prompt_powerlevel10k_setup] )) \
    && prompt_themes+=( p10k ) \
    || unfunction prompt_p10k_setup

  # Hook starship into Zsh's prompt system.
  (( $+commands[starship] )) \
    && prompt_themes+=( starship ) \
    || unfunction prompt_starship_setup

  # Keep prompt array sorted.
  prompt_themes=( "${(@on)prompt_themes}" )

  # We can run promptinit early, and if we did we no longer need a post_zshrc hook.
  post_zshrc_hook=(${post_zshrc_hook:#run_promptinit})
}

function run_promptinit {
  # Initialize the built-in prompt system.
  autoload -Uz promptinit && promptinit

  # Set the prompt if specified.
  local -a prompt_argv
  zstyle -a ':zshrc1:prompt' theme 'prompt_argv'
  if [[ $TERM == (dumb|linux|*bsd*) ]]; then
    prompt 'off'
  elif (( $#prompt_argv > 0 )); then
    prompt "$prompt_argv[@]"
  fi
}
post_zshrc_hook+=(run_promptinit)

#
#endregion
#region Completion
#

# Let's talk compinit... compinit works by finding _completion files in your fpath. That
# means fpath needs to be fully populated prior to calling it. But sometimes you need to
# call compdef before fpath is done being populated to define a completion (eg: plugins
# do this). compinit has big chicken-and-egg problems. This code handles all those
# completion use cases by wrapping compinit, queueing calls to compdef, and hooking the
# real call to compinit to run post_zshrc.

# Define compinit placeholder functions (compdef) so we can queue up calls.
# That way when the real compinit is called, we can execute the queue.
typeset -gHa __zshrc1_compdef_queue=()
function compdef {
  (( $# )) || return
  local compdef_args=("${@[@]}")
  __zshrc1_compdef_queue+=("$(typeset -p compdef_args)")
}

# Wrap compinit temporarily so that when the real compinit call happens, the
# queue of compdef calls is processed.
function compinit {
  unfunction compinit compdef &>/dev/null
  autoload -Uz compinit && compinit "$@"

  # Apply all the queued compdefs.
  local typedef_compdef_args
  for typedef_compdef_args in $__zshrc1_compdef_queue; do
    eval $typedef_compdef_args
    compdef "$compdef_args[@]"
  done
  unset __zshrc1_compdef_queue

  # We can run compinit early, and if we did we no longer need a post_zshrc hook.
  post_zshrc_hook=(${post_zshrc_hook:#run_compinit})
}

function run_compinit {
  # Initialize the built-in Zsh completion system.
  if [[ -z "$ZSH_COMPDUMP" ]]; then
    local ZSH_COMPDUMP
    if zstyle -T ':zshrc1:completion' use-xdg-basedirs; then
      : ${__zsh_cache_dir:=${XDG_CACHE_HOME:-$HOME/.cache}/zsh}
      ZSH_COMPDUMP=$__zsh_cache_dir/compdump
    else
      ZSH_COMPDUMP=$HOME/.zcompdump
    fi
  fi

  # Load and initialize the completion system ignoring insecure directories with a
  # cache time of 20 hours, so it should almost always regenerate the first time a
  # shell is opened each day.
  autoload -Uz compinit
  local comp_files=($ZSH_COMPDUMP(Nmh-20))
  if (( $#comp_files )); then
    compinit -i -C -d "$ZSH_COMPDUMP"
  else
    compinit -i -d "$ZSH_COMPDUMP"
    # Ensure $ZSH_COMPDUMP is younger than the cache time even if it isn't regenerated.
    touch "$ZSH_COMPDUMP"
  fi

  # Compile zcompdump, if modified, in background to increase startup speed.
  {
    if [[ -s "$ZSH_COMPDUMP" && (! -s "${ZSH_COMPDUMP}.zwc" || "$ZSH_COMPDUMP" -nt "${ZSH_COMPDUMP}.zwc") ]]; then
      if command mkdir "${ZSH_COMPDUMP}.zwc.lock" 2>/dev/null; then
        zcompile "$ZSH_COMPDUMP"
        command rmdir  "${ZSH_COMPDUMP}.zwc.lock" 2>/dev/null
      fi
    fi
  } &!
}
post_zshrc_hook+=(run_compinit)

() {
  # Set Zsh completion options (16.2.2: https://zsh.sourceforge.io/Doc/Release/Options.html).
  setopt always_to_end           # Move cursor to the end of a completed word.
  setopt auto_list               # Automatically list choices on ambiguous completion.
  setopt auto_menu               # Show completion menu on a successive tab press.
  setopt auto_param_slash        # If completed parameter is a directory, add a trailing slash.
  setopt complete_in_word        # Complete from both ends of a word.
  setopt path_dirs               # Perform path search even on command names with slashes.
  setopt NO_flow_control         # Disable start/stop characters in shell editor.
  setopt NO_menu_complete        # Do not autoselect the first completion entry.

  # Add completions for keg-only brews when available.
  local brew_prefix
  if (( $+commands[brew] )); then
    brew_prefix=${HOMEBREW_PREFIX:-${HOMEBREW_REPOSITORY:-$commands[brew]:A:h:h}}
    # $HOMEBREW_PREFIX defaults to $HOMEBREW_REPOSITORY but is explicitly set to
    # /usr/local when $HOMEBREW_REPOSITORY is /usr/local/Homebrew.
    # https://github.com/Homebrew/brew/blob/2a850e02d8f2dedcad7164c2f4b95d340a7200bb/bin/brew#L66-L69
    [[ $brew_prefix == '/usr/local/Homebrew' ]] && brew_prefix=$brew_prefix:h

    # Add brew locations to fpath
    fpath=(
      $brew_prefix/opt/curl/share/zsh/site-functions(/N)  # Add curl completions.
      $brew_prefix/share/zsh/site-functions(-/FN)  # Add zsh completions.
      $fpath
    )
  fi

  # Add Fish-like custom completions directory.
  fpath=($__zsh_config_dir/completions(/N) $fpath)
}

#
#endregion
#region CompStyles
#

# Define completion styles.
function compstyle_zshrc1_setup {
  # Use caching to make completion for commands such as dpkg and apt usable.
  local zcompcache
  zstyle -T ':zshrc1:completion' use-xdg-basedirs &&
    zcompcache="$__zsh_cache_dir/zcompcache" ||
    zcompcache=~/.zcompcache
  zstyle ':completion::complete:*' cache-path "$zcompcache"
  zstyle ':completion::complete:*' use-cache on

  # Defaults.
  zstyle ':completion:*:default' list-prompt '%S%M matches%s'

  # Case-insensitive (all), partial-word, and then substring completion.
  zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

  # Group matches and describe.
  zstyle ':completion:*:*:*:*:*' menu select
  zstyle ':completion:*:matches' group 'yes'
  zstyle ':completion:*:options' description 'yes'
  zstyle ':completion:*:options' auto-description '%d'
  zstyle ':completion:*:corrections' format ' %F{red}-- %d (errors: %e) --%f'
  zstyle ':completion:*:descriptions' format ' %F{purple}-- %d --%f'
  zstyle ':completion:*:messages' format ' %F{green} -- %d --%f'
  zstyle ':completion:*:warnings' format ' %F{yellow}-- no matches found --%f'
  zstyle ':completion:*' format ' %F{blue}-- %d --%f'
  zstyle ':completion:*' group-name ''
  zstyle ':completion:*' verbose yes

  # Fuzzy match mistyped completions.
  zstyle ':completion:*' completer _complete _match _approximate
  zstyle ':completion:*:match:*' original only
  zstyle ':completion:*:approximate:*' max-errors 1 numeric

  # Increase the number of errors based on the length of the typed word. But make
  # sure to cap (at 7) the max-errors to avoid hanging.
  zstyle -e ':completion:*:approximate:*' max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3>7?7:($#PREFIX+$#SUFFIX)/3))numeric)'

  # Don't complete unavailable commands.
  zstyle ':completion:*:functions' ignored-patterns '(_*|pre(cmd|exec))'

  # Array completion element sorting.
  zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

  # Directories
  zstyle ':completion:*:*:cd:*' tag-order local-directories directory-stack path-directories
  zstyle ':completion:*:*:cd:*:directory-stack' menu yes select
  zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
  zstyle ':completion:*' squeeze-slashes true
  zstyle ':completion:*' special-dirs ..

  # History
  zstyle ':completion:*:history-words' stop yes
  zstyle ':completion:*:history-words' remove-all-dups yes
  zstyle ':completion:*:history-words' list false
  zstyle ':completion:*:history-words' menu yes

  # Environment Variables
  zstyle ':completion::*:(-command-|export):*' fake-parameters ${${${_comps[(I)-value-*]#*,}%%,*}:#-*-}

  # Ignore multiple entries.
  zstyle ':completion:*:(rm|kill|diff):*' ignore-line other
  zstyle ':completion:*:rm:*' file-patterns '*:all-files'

  # Kill
  zstyle ':completion:*:*:*:*:processes' command 'ps -u $LOGNAME -o pid,user,command -w'
  zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;36=0=01'
  zstyle ':completion:*:*:kill:*' menu yes select
  zstyle ':completion:*:*:kill:*' force-list always
  zstyle ':completion:*:*:kill:*' insert-ids single

  # complete manual by their section
  zstyle ':completion:*:manuals'    separate-sections true
  zstyle ':completion:*:manuals.*'  insert-sections   true
  zstyle ':completion:*:man:*'      menu yes select
}

() {
  local compstyle
  zstyle -s ':zshrc1:completion' compstyle 'compstyle' || compstyle=zshrc1
  (( $+functions[compstyle_${compstyle}_setup] )) && compstyle_${compstyle}_setup
}

#
#endregion
#region Plugins
#

() {
  [[ -r "${ZSHRC1:A:h}/lib/unplugged.zsh" ]] || return 1
  source ${ZSHRC1:A:h}/lib/unplugged.zsh

  local -a clone_plugins path_plugins fpath_plugins zsh_plugins
  zstyle -a ':zshrc1:plugins:kind:clone' load 'clone_plugins'
  zstyle -a ':zshrc1:plugins:kind:path'  load 'path_plugins'
  zstyle -a ':zshrc1:plugins:kind:fpath' load 'fpath_plugins'
  zstyle -a ':zshrc1:plugins:kind:zsh'   load 'zsh_plugins'

  clone_plugins=($clone_plugins $path_plugins $fpath_plugins $zsh_plugins)
  [[ "${#clone_plugins}" -gt 0 ]] || return
  plugin clone $clone_plugins
  plugin load --kind path $path_plugins
  plugin load --kind fpath $fpath_plugins
  plugin load $zsh_plugins
}

#
#endregion
#region Zsh conf.d
#

function run_confd {
  # Which conf.d directory to use? Use glob_subst to support '~'.
  : ${__zsh_config_dir:=${ZDOTDIR:-${XDG_CONFIG_HOME:-$HOME/.config}/zsh}}
  local confd
  zstyle -s ':zshrc1:confd' directory 'confd' || confd=$__zsh_config_dir/conf.d
  confd=${~confd}

  # Source all scripts in conf.d.
  local zrcfile
  for zrcfile in $confd/*.{z,}sh(N); do
    # ignore files that begin with ~
    [[ "${zrcfile:t}" == '~'* ]] && continue
    source "$zrcfile"
  done
}
post_zshrc_hook+=(run_confd)

#
#endregion

# vim: ft=zsh sw=2 ts=2 et
