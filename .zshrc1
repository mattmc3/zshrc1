#!/bin/zsh
# .zshrc1
# > A powerful starter .zshrc
# Project Home: https://github.com/mattmc3/zshrc1

function z1_ensure_dirs_exist {
  local zdirvar
  for zdirvar in $@; do
    [[ -d "${(P)zdirvar}" ]] || mkdir -p "$(P){zdirvar}"
  done
}

function z1_init_environment {
  if zstyle -T ':zshrc1:environment' use-xdg-basedirs; then
    export XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
    export XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
    export XDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}
    export XDG_STATE_HOME=${XDG_STATE_HOME:-$HOME/.local/state}
    z1_ensure_dirs_exist XDG_{CONFIG,CACHE,DATA,STATE}_HOME
  fi

  # Set Zsh options related to globbing.
  setopt extended_glob         # Use more awesome globbing features.
  setopt glob_dots             # Include dotfiles when globbing.
  setopt no_rm_star_silent     # Ask for confirmation for `rm *' or `rm path/*'

  # Set general Zsh options.
  setopt combining_chars       # Combine 0-len chars with the base character (eg: accents).
  setopt interactive_comments  # Enable comments in interactive shell.
  setopt rc_quotes             # Allow 'Hitchhikers''s Guide' instead of 'Hitchhikers'\''s Guide'.
  unsetopt mail_warning        # Don't print a warning message if a mail file has been accessed.
  unsetopt beep                # Don't beep on error in line editor.

  # Set Zsh options related to job control.
  setopt auto_resume             # Attempt to resume existing job before creating a new process.
  setopt long_list_jobs          # List jobs in the long format by default.
  setopt notify                  # Report status of background jobs immediately.
  unsetopt bg_nice               # Don't run all background jobs at a lower priority.
  unsetopt check_jobs            # Don't report on jobs when shell exit.
  unsetopt hup                   # Don't kill jobs on shell exit.

  # Set common variables if they have not already been set.
  export EDITOR=${EDITOR:-vim}
  export VISUAL=${VISUAL:-vim}
  export PAGER=${PAGER:-less}
  [[ "$OSTYPE" == darwin* ]] && export BROWSER=${BROWSER:-open}
  export LANG=${LANG:-en_US.UTF-8}

  # Set the Less input preprocessor.
  # Try both `lesspipe` and `lesspipe.sh` as either might exist on a system.
  if [[ -z "$LESSOPEN" ]] && (( $#commands[(i)lesspipe(|.sh)] )); then
    export LESSOPEN="| /usr/bin/env $commands[(i)lesspipe(|.sh)] %s 2>&-"
  fi
  export LESS="${LESS:--g -i -M -R -S -w -z-4}"

  # Ensure path arrays do not contain duplicates.
  typeset -gU cdpath fpath mailpath path

  # Add /usr/local to path.
  path=(/usr/local/{,s}bin(N) $path)

  # Setup homebrew if it exists on the system.
  local -aU brew_cmds=(
    /usr/local/bin/brew(N)
    /opt/homebrew/bin/brew(N)
    $commands[brew](N)
    $HOME/brew/bin/brew(N)
  )
  for brewcmd in $brew_cmds; do
    # By looping, we get a properly built path.
    source <($brewcmd shellenv)
  done

  # Allow user bin.
  path=($HOME/{,s}bin(N) $path)
}

function z1_init_history {
  # Set Zsh options related to history.
  setopt bang_hist               # Treat the '!' character specially during expansion.
  setopt extended_history        # Write the history file in the ':start:elapsed;command' format.
  setopt hist_expire_dups_first  # Expire a duplicate event first when trimming history.
  setopt hist_find_no_dups       # Do not display a previously found event.
  setopt hist_ignore_all_dups    # Delete an old recorded event if a new event is a duplicate.
  setopt hist_ignore_dups        # Do not record an event that was just recorded again.
  setopt hist_ignore_space       # Do not record an event starting with a space.
  setopt hist_reduce_blanks      # Remove extra blanks from commands added to the history list.
  setopt hist_save_no_dups       # Do not write a duplicate event to the history file.
  setopt hist_verify             # Do not execute immediately upon history expansion.
  setopt inc_append_history      # Write to the history file immediately, not when the shell exits.
  unsetopt hist_beep             # Don't beep when accessing non-existent history.
  unsetopt share_history         # Don't share history between all sessions.

  # Path to the history file.
  zstyle -s ':zshrc1:history' histfile 'HISTFILE' || HISTFILE=$__zsh_user_data_dir/zsh_history
  [[ -d $HISTFILE:h ]] || mkdir -p $HISTFILE:h

  # History file size (default 1000).
  zstyle -s ':zshrc1:history' savehist 'SAVEHIST' || SAVEHIST=10000

  # Session history size, default: 2000).
  zstyle -s ':zshrc1:history' histsize 'HISTSIZE' || HISTSIZE=20000

  # Set history aliases.
  if ! zstyle -t ':zshrc1:history:alias' skip; then
    alias hist='fc -li'
    alias history-stat="history 0 | awk '{print \$2}' | sort | uniq -c | sort -n -r | head"
  fi
}

function z1_init_directory {
  # Set Zsh options related to directories, globbing, and I/O.
  setopt auto_pushd              # Make cd push the old directory onto the dirstack.
  setopt pushd_minus             # Exchanges meanings of +/- when navigating the dirstack.
  setopt pushd_silent            # Do not print the directory stack after pushd or popd.
  setopt pushd_to_home           # Push to home directory when no argument is given.
  setopt multios                 # Write to multiple descriptors.
  setopt extended_glob           # Use extended globbing syntax.
  setopt glob_dots               # Don't hide dotfiles from glob patterns.
  unsetopt clobber               # Don't overwrite files with >. Use >| to bypass.
  unsetopt rm_star_silent        # Ask for confirmation for `rm *' or `rm path/*'

  # Set directory aliases.
  if ! zstyle -t ':zshrc1:directory:alias' skip; then
    alias -- -='cd -'
    alias dirh='dirs -v'
    local i dotdot=('..')
    for i in {1..9}; do
      alias "$i"="cd -${i}"             # dirstack aliases (eg: "3"="cd -3")
      alias -g "..$i"=${(pj:/:)dotdot}  # backref aliases (eg: "..3"="../../..")
      dotdot+=('..')
    done
  fi
}

function z1_init_color {
  # Built-in zsh colors.
  autoload -Uz colors && colors

  # Colorize man pages.
  # mb/me := start/end blink mode      md/me := start/end bold mode
  # so/se := start/end standout mode   us/ue := start/end underline mode
  [[ -n "$LESS_TERMCAP_mb" ]] && export LESS_TERMCAP_mb=$'\e[01;34m'     # bold,blue
  [[ -n "$LESS_TERMCAP_md" ]] && export LESS_TERMCAP_md=$'\e[01;34m'     # bold,blue
  [[ -n "$LESS_TERMCAP_so" ]] && export LESS_TERMCAP_so=$'\e[00;47;30m'  # white bg,black fg
  [[ -n "$LESS_TERMCAP_us" ]] && export LESS_TERMCAP_us=$'\e[04;35m'     # underline magenta
  [[ -n "$LESS_TERMCAP_se" ]] && export LESS_TERMCAP_se=$'\e[0m'
  [[ -n "$LESS_TERMCAP_ue" ]] && export LESS_TERMCAP_ue=$'\e[0m'
  [[ -n "$LESS_TERMCAP_me" ]] && export LESS_TERMCAP_me=$'\e[0m'

  # Set LS_COLORS using (g)dircolors if found.
  local dircolors_cmds=(
    $commands[dircolors](N) $commands[gdircolors](N)
  )
  if [[ -z "$LS_COLORS" ]] && (( $#dircolors_cmds )); then
    source <($dircolors_cmds[1] -b)
  fi

  # Missing dircolors is a good indicator of a BSD system.
  if (( ! $+commands[dircolors] )) || [[ "$OSTYPE" == darwin* ]]; then
    # For BSD systems, set LSCOLORS
    export CLICOLOR=1
    export LSCOLORS="${LSCOLORS:-exfxcxdxbxGxDxabagacad}"
    # Also set LS_COLORS for good measure when gdircolors from coreutils is not installed.
    export LS_COLORS="${LS_COLORS:-di=34:ln=35:so=32:pi=33:ex=31:bd=1;36:cd=1;33:su=30;41:sg=30;46:tw=30;42:ow=30;43}"
  fi

  # Set aliases.
  if ! zstyle -t ':zshrc1:colors:alias' skip; then
    # Set colors for grep.
    alias grep="${aliases[grep]:-grep} --color=auto"

    # Set colors for coreutils ls
    if (( $+commands[gls] )); then
      alias gls="${aliases[gls]:-gls} --group-directories-first --color=auto"
    fi

    # Set colors for ls
    if (( ! $+commands[dircolors] )) || [[ "$OSTYPE" == darwin* ]]; then
      alias ls="${aliases[ls]:-ls} -G"
    else
      alias ls="${aliases[ls]:-ls} --group-directories-first --color=auto"
    fi

    # Print a simple colormap.
    alias colormap='for i in {0..255}; do print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+"\n"}; done'
  fi

  # Colorize completions
  zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
}

function z1_init_editor {
  # Allow mapping Ctrl+S and Ctrl+Q shortcuts
  [[ -r ${TTY:-} && -w ${TTY:-} && $+commands[stty] == 1 ]] && stty -ixon <$TTY >$TTY
}

function z1_init_utility {
  # Use built-in paste magic.
  autoload -Uz bracketed-paste-url-magic
  zle -N bracketed-paste bracketed-paste-url-magic
  autoload -Uz url-quote-magic
  zle -N self-insert url-quote-magic

  # Load more specific 'run-help' function from $fpath.
  (( $+aliases[run-help] )) && unalias run-help && autoload -Uz run-help
  alias help=run-help

  # Ensure envsubst command exists.
  if ! (( $+commands[envsubst] )); then
    alias envsubst="python -c 'import os,sys;[sys.stdout.write(os.path.expandvars(l)) for l in sys.stdin]'"
  fi

  # Ensure hd (hex dump) command exists.
  if ! (( $+commands[hd] )) && (( $+commands[hexdump] )); then
    alias hd="hexdump -C"
  fi

  # Ensure open command exists.
  if ! (( $+commands[open] )); then
    if [[ "$OSTYPE" == cygwin* ]]; then
      alias open='cygstart'
    elif [[ "$OSTYPE" == linux-android ]]; then
      alias open='termux-open'
    elif (( $+commands[xdg-open] )); then
      alias open='xdg-open'
    fi
  fi

  # Ensure pbcopy/pbpaste commands exist.
  if ! (( $+commands[pbcopy] )); then
    if [[ "$OSTYPE" == cygwin* ]]; then
      alias pbcopy='tee > /dev/clipboard'
      alias pbpaste='cat /dev/clipboard'
    elif [[ "$OSTYPE" == linux-android ]]; then
      alias pbcopy='termux-clipboard-set'
      alias pbpaste='termux-clipboard-get'
    elif (( $+commands[wl-copy] && $+commands[wl-paste] )); then
      alias pbcopy='wl-copy'
      alias pbpaste='wl-paste'
    elif [[ -n $DISPLAY ]]; then
      if (( $+commands[xclip] )); then
        alias pbcopy='xclip -selection clipboard -in'
        alias pbpaste='xclip -selection clipboard -out'
      elif (( $+commands[xsel] )); then
        alias pbcopy='xsel --clipboard --input'
        alias pbpaste='xsel --clipboard --output'
      fi
    fi
  fi
}

function z1_init_confd {
  # Which conf.d directory to use? Use glob_subst to support '~'.
  local confd
  zstyle -s ':zshrc1:confd' directory 'confd' || confd=$__zsh_config_dir/conf.d
  confd=${~confd}

  # Source all scripts in conf.d.
  local zrcfile
  for zrcfile in $confd/*.{z,}sh(N); do
    # ignore files that begin with ~
    [[ ${zrcfile:t} == '~'* ]] && continue
    source $zrcfile
  done
}

function z1_init_zfunctions {
  # Which autoload functions directory to use? Use glob_subst to support '~'.
  if [[ -z "$ZFUNCDIR" ]]; then
    local ZFUNCDIR
    zstyle -s ':zshrc1:zfunctions' directory 'ZFUNCDIR' || ZFUNCDIR=$__zsh_config_dir/functions
    ZFUNCDIR=${~ZFUNCDIR}
  fi

  # Autoload a user functions directory.
  local fndir
  for fndir in $ZFUNCDIR(-/FN) $ZFUNCDIR/*(-/FN); do
    fpath=($fndir $fpath)
    autoload -Uz $fndir/*~*/_*(N.:t)
  done
}

function z1_init_prompt {
  # Expand parameters in prompt variables.
  setopt prompt_subst

  # Set 2 space indent for each new level in a multi-line script.
  # This can then be overridden by a prompt, but is a better default than Zsh's.
  PS2='${${${(%):-%_}//[^ ]}// /  }    '

  # Initialize the built-in prompt system.
  autoload -Uz promptinit && promptinit

  # Add zshrc1 prompts.
  prompt_themes+=(starship)

  # Set the prompt if specified.
  local -a prompt_argv
  zstyle -a ':zshrc1:prompt' theme 'prompt_argv'
  if [[ $TERM == (dumb|linux|*bsd*) ]]; then
    prompt 'off'
  elif (( $#prompt_argv > 0 )); then
    prompt "$prompt_argv[@]"
  fi
}

function z1_init_completion {
  # Set Zsh completion options (16.2.2: https://zsh.sourceforge.io/Doc/Release/Options.html).
  setopt always_to_end           # Move cursor to the end of a completed word.
  setopt auto_list               # Automatically list choices on ambiguous completion.
  setopt auto_menu               # Show completion menu on a successive tab press.
  setopt auto_param_slash        # If completed parameter is a directory, add a trailing slash.
  setopt complete_in_word        # Complete from both ends of a word.
  setopt path_dirs               # Perform path search even on command names with slashes.
  unsetopt flow_control          # Disable start/stop characters in shell editor.
  unsetopt menu_complete         # Do not autoselect the first completion entry.

  # Add Fish-like custom completions directory.
  fpath=($__zsh_config_dir/completions(/N) $fpath)

  # Set completion zstyles.
  local compstyle
  zstyle -s ':zshrc1:completion' compstyle 'compstyle' || compstyle=zshrc1
  (( $+functions[compstyle_${ZSH_COMPSTYLE}_setup] )) && compstyle_${ZSH_COMPSTYLE}_setup

  # Initialize completions if the user didn't.
  (( $+functions[compinit] )) || run_compinit
}

function prompt_starship_setup {
  if ! (( $+commands[starship] )); then
    echo >&2 "Starship prompt not installed. See https://starship.rs to install."
    return 1
  fi

  # When loaded through the prompt command, these prompt_* options will be enabled
  prompt_opts=(cr percent sp subst)

  # Set the starship config based on the argument if provided.
  local theme="$1"
  if [[ -n "$theme" ]]; then
    local -a configs=(
      $__zsh_config_dir/themes/${theme}.toml(N)
      ${XDG_CONFIG_HOME:-$HOME/.config}/starship/${theme}.toml(N)
    )
    if (( $#configs )); then
      export STARSHIP_CONFIG=$configs[1]
    else
      unset STARSHIP_CONFIG
    fi
  fi

  eval "$(starship init zsh)"
}

function run_compinit {
  # Initialize the built-in Zsh completion system.
  if [[ -z "$ZSH_COMPDUMP" ]]; then
    local ZSH_COMPDUMP
    if zstyle -T ':zshrc1:completion' use-xdg-basedirs; then
      ZSH_COMPDUMP=$__zsh_cache_dir/compdump
    else
      ZSH_COMPDUMP=$HOME/.zcompdump
    fi
  fi

  # Load and initialize the completion system ignoring insecure directories with a
  # cache time of 20 hours, so it should almost always regenerate the first time a
  # shell is opened each day.
  autoload -Uz compinit
  local comp_files=($ZSH_COMPDUMP(Nmh-20))
  if (( $#comp_files )); then
    compinit -i -C -d "$ZSH_COMPDUMP"
  else
    compinit -i -d "$ZSH_COMPDUMP"
    # Ensure $ZSH_COMPDUMP is younger than the cache time even if it isn't regenerated.
    touch "$ZSH_COMPDUMP"
  fi

  # Compile zcompdump, if modified, in background to increase startup speed.
  {
    if [[ -s "$ZSH_COMPDUMP" && (! -s "${ZSH_COMPDUMP}.zwc" || "$ZSH_COMPDUMP" -nt "${ZSH_COMPDUMP}.zwc") ]]; then
      if command mkdir "${ZSH_COMPDUMP}.zwc.lock" 2>/dev/null; then
        zcompile "$ZSH_COMPDUMP"
        command rmdir  "${ZSH_COMPDUMP}.zwc.lock" 2>/dev/null
      fi
    fi
  } &!
}

# Set Zsh completion styles.
function compstyle_zshrc1_setup {
  # Use caching to make completion for commands such as dpkg and apt usable.
  zstyle ':completion::complete:*' use-cache on
  if zstyle -T ':zshrc1:completion' use-xdg-basedirs; then
    zstyle ':completion::complete:*' cache-path "$__zsh_cache_dir/compcache"
  else
    zstyle ':completion::complete:*' cache-path "$HOME/.zcompcache"
  fi

  # Defaults.
  zstyle ':completion:*:default' list-prompt '%S%M matches%s'

  # Case-insensitive (all), partial-word, and then substring completion.
  zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

  # Group matches and describe.
  zstyle ':completion:*:*:*:*:*' menu select
  zstyle ':completion:*:matches' group 'yes'
  zstyle ':completion:*:options' description 'yes'
  zstyle ':completion:*:options' auto-description '%d'
  zstyle ':completion:*:corrections' format ' %F{red}-- %d (errors: %e) --%f'
  zstyle ':completion:*:descriptions' format ' %F{purple}-- %d --%f'
  zstyle ':completion:*:messages' format ' %F{green} -- %d --%f'
  zstyle ':completion:*:warnings' format ' %F{yellow}-- no matches found --%f'
  zstyle ':completion:*' format ' %F{blue}-- %d --%f'
  zstyle ':completion:*' group-name ''
  zstyle ':completion:*' verbose yes

  # Fuzzy match mistyped completions.
  zstyle ':completion:*' completer _complete _match _approximate
  zstyle ':completion:*:match:*' original only
  zstyle ':completion:*:approximate:*' max-errors 1 numeric

  # Increase the number of errors based on the length of the typed word. But make
  # sure to cap (at 7) the max-errors to avoid hanging.
  zstyle -e ':completion:*:approximate:*' max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3>7?7:($#PREFIX+$#SUFFIX)/3))numeric)'

  # Don't complete unavailable commands.
  zstyle ':completion:*:functions' ignored-patterns '(_*|pre(cmd|exec))'

  # Array completion element sorting.
  zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

  # Directories
  zstyle ':completion:*:*:cd:*' tag-order local-directories directory-stack path-directories
  zstyle ':completion:*:*:cd:*:directory-stack' menu yes select
  zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
  zstyle ':completion:*' squeeze-slashes true
  zstyle ':completion:*' special-dirs ..

  # History
  zstyle ':completion:*:history-words' stop yes
  zstyle ':completion:*:history-words' remove-all-dups yes
  zstyle ':completion:*:history-words' list false
  zstyle ':completion:*:history-words' menu yes

  # Environment Variables
  zstyle ':completion::*:(-command-|export):*' fake-parameters ${${${_comps[(I)-value-*]#*,}%%,*}:#-*-}

  # Ignore multiple entries.
  zstyle ':completion:*:(rm|kill|diff):*' ignore-line other
  zstyle ':completion:*:rm:*' file-patterns '*:all-files'

  # Kill
  zstyle ':completion:*:*:*:*:processes' command 'ps -u $LOGNAME -o pid,user,command -w'
  zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;36=0=01'
  zstyle ':completion:*:*:kill:*' menu yes select
  zstyle ':completion:*:*:kill:*' force-list always
  zstyle ':completion:*:*:kill:*' insert-ids single

  # complete manual by their section
  zstyle ':completion:*:manuals'    separate-sections true
  zstyle ':completion:*:manuals.*'  insert-sections   true
  zstyle ':completion:*:man:*'      menu yes select
}

function plugin {
  local cmd=$1
  (( $# )) && shift || cmd=help
  if (( $+functions[plugin-$cmd] )); then
    "plugin-$cmd" "$@"
  else
    echo "plugin: command not found '$cmd'."
  fi
}

function plugin-help {
  echo "usage: plugin <command>"
  echo "       plugin load [--kind <path_fpath>] <plugins...>"
  echo ""
  echo "commands:"
  echo "  help     print help"
  echo "  clone    clone plugins"
  echo "  load     load plugins"
  echo "  list     list plugins"
  echo "  home     print plugin home"
  echo "  update   update plugins"
  echo "  compile  compile plugins"
  echo ""
}

function plugin-clone {
  emulate -L zsh; setopt local_options $__plugin_zopts
  local repo plugdir; local -Ua repos
  local plugin_home=$(plugin-home)

  # Remove bare words ${(M)@:#*/*} and paths with leading slash ${@:#/*}.
  # Then split/join to keep the 2-part user/repo form to bulk-clone repos.
  for repo in ${${(M)@:#*/*}:#/*}; do
    repo=${(@j:/:)${(@s:/:)repo}[1,2]}
    [[ -e $plugin_home/$repo ]] || repos+=$repo
  done

  for repo in $repos; do
    plugdir=$plugin_home/$repo
    if [[ ! -d $plugdir ]]; then
      echo "Cloning $repo..."
      (
        command git clone -q --depth 1 --recursive --shallow-submodules \
          https://github.com/${repo} $plugdir
        plugin-compile $plugdir
      ) &
    fi
  done
  wait
}

function plugin-home {
  echo "$__zsh_cache_dir/repos"
}

function plugin-load {
  source <(plugin-script $@)
}

function plugin-script {
  emulate -L zsh; setopt local_options $__plugin_zopts

  # parse args
  local kind  # kind=path,fpath
  while (( $# )); do
    case $1 in
      -k|--kind)  shift; kind=$1 ;;
      -*)         echo >&2 "Invalid argument '$1'."; return 2 ;;
      *)          break ;;
    esac
    shift
  done

  local plugin_home=$(plugin-home)
  local plugin src="source" inits=()
  (( ! $+functions[zsh-defer] )) || src="zsh-defer ."

  for plugin in $@; do
    if [[ -n "$kind" ]]; then
      echo "$kind=(\$$kind $plugin_home/$plugin)"
    else
      inits=(
        $__zsh_config_dir/plugins/$plugin/${plugin:t}.{plugin.zsh,zsh-theme,zsh,sh}(N)
        $plugin_home/$plugin/${plugin:t}.{plugin.zsh,zsh-theme,zsh,sh}(N)
        $plugin_home/$plugin/*.{plugin.zsh,zsh-theme,zsh,sh}(N)
        $plugin_home/$plugin(N)
        ${plugin}/*.{plugin.zsh,zsh-theme,zsh,sh}(N)
        ${plugin}(N)
      )
      (( $#inits )) || { echo >&2 "No plugin init found '$plugin'." && continue }
      plugin=$inits[1]
      echo "fpath=(\$fpath $plugin:h)"
      echo "$src $plugin"
      [[ "$plugin:h:t" == zsh-defer ]] && src="zsh-defer ."
    fi
  done
}

function plugin-list {
  local plugin_home=$(plugin-home)
  for plugdir in $plugin_home/*/*/.git(N/); do
    echo ${${plugdir:A:h}##$plugin_home/}
  done
}

function plugin-update {
  emulate -L zsh; setopt local_options $__plugin_zopts

  local plugdir oldsha newsha
  for plugdir in $(plugin-home)/*/*/.git(N/); do
    plugdir=${plugdir:A:h}
    echo "Updating ${plugdir:h:t}/${plugdir:t}..."
    (
      oldsha=$(command git -C $plugdir rev-parse --short HEAD)
      command git -C $plugdir pull --quiet --ff --depth 1 --rebase --autostash
      newsha=$(command git -C $plugdir rev-parse --short HEAD)
      [[ $oldsha == $newsha ]] || echo "Plugin updated: $plugdir:t ($oldsha -> $newsha)"
    ) &
  done
  wait
  plugin-compile
  echo "Update complete."
}

function plugin-compile {
  emulate -L zsh; setopt local_options $__plugin_zopts

  autoload -Uz zrecompile
  local zfile
  for zfile in ${1:-$(plugin-home)}/**/*.zsh{,-theme}(N); do
    [[ $zfile != */test-data/* ]] || continue
    zrecompile -pq "$zfile"
  done
}

# Run zshrc1
() {
  typeset -g ZSHRC1_VERSION="1.0.1"
  typeset -gHa __plugin_zopts=(extended_glob glob_dots no_monitor)

  # Minimal required environment vars.
  export __zsh_config_dir=${ZDOTDIR:-${XDG_CONFIG_HOME:-$HOME/.config}/zsh}
  export __zsh_user_data_dir=${XDG_DATA_HOME:-$HOME/.local/share}/zsh
  export __zsh_cache_dir=${XDG_CACHE_HOME:-$HOME/.cache}/zsh
  z1_ensure_dirs_exist __zsh_{config,user_data,cache}_dir

  # Users can customize with zstyles if they want.
  [[ ! -r $__zsh_config_dir/.zstyles ]] || source $__zsh_config_dir/.zstyles

  # Run inits.
  z1_init_environment
  z1_init_history
  z1_init_directory
  z1_init_color
  z1_init_editor
  z1_init_utility
  z1_init_prompt
  z1_init_zfunctions
  z1_init_confd
  z1_init_completion
}

# vim: ft=zsh sw=2 ts=2 et
